"use strict";(self.webpackChunkmongodb_rag_docs=self.webpackChunkmongodb_rag_docs||[]).push([[443],{4053:function(e,n,r){r.r(n),r.d(n,{assets:function(){return a},contentTitle:function(){return t},default:function(){return h},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return d}});var s=JSON.parse('{"id":"api-reference","title":"API Reference","description":"MongoRAG Class","source":"@site/docs/api-reference.md","sourceDirName":".","slug":"/api-reference","permalink":"/mongodb-rag/docs/api-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/mongodb-rag/tree/main/mongodb-rag-docs/docs/api-reference.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"api-reference","title":"API Reference","sidebar_position":5},"sidebar":"docs","previous":{"title":"Advanced Example","permalink":"/mongodb-rag/docs/examples/advanced-example"}}'),i=r(4848),o=r(8453);const c={id:"api-reference",title:"API Reference",sidebar_position:5},t="API Reference",a={},d=[{value:"MongoRAG Class",id:"mongorag-class",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Methods",id:"methods",level:3},{value:"connect()",id:"connect",level:4},{value:"disconnect()",id:"disconnect",level:4},{value:"ingestBatch()",id:"ingestbatch",level:4},{value:"search()",id:"search",level:4},{value:"Type Definitions",id:"type-definitions",level:3},{value:"Configuration Examples",id:"configuration-examples",level:3},{value:"Basic Configuration",id:"basic-configuration",level:4},{value:"Advanced Configuration",id:"advanced-configuration",level:4},{value:"Error Handling",id:"error-handling",level:3},{value:"Events",id:"events",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,i.jsx)(n.h2,{id:"mongorag-class",children:"MongoRAG Class"}),"\n",(0,i.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,i.jsx)(n.p,{children:"Creates a new instance of the MongoRAG class."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const rag = new MongoRAG({\n  mongoUrl: string,\n  database: string,\n  collection: string,\n  embedding?: {\n    provider: 'openai',\n    apiKey: string,\n    model?: string,\n    batchSize?: number\n  },\n  preprocessing?: {\n    documentPreprocessor?: Function,\n    chunkSize?: number,\n    chunkOverlap?: number\n  },\n  search?: {\n    maxResults?: number,\n    minScore?: number\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config.mongoUrl"})," (string, required): MongoDB connection URI"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config.database"})," (string, required): MongoDB database name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config.collection"})," (string, required): MongoDB collection name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config.embedding"})," (object, optional):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"provider"}),": Embedding provider (currently supports 'openai')"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"apiKey"}),": API key for the embedding provider"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"model"}),": Model name (default: 'text-embedding-ada-002')"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"batchSize"}),": Number of documents to embed in each batch"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config.preprocessing"})," (object, optional):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"documentPreprocessor"}),": Custom function for document preprocessing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"chunkSize"}),": Maximum chunk size in tokens"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"chunkOverlap"}),": Number of overlapping tokens between chunks"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config.search"})," (object, optional):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"maxResults"}),": Maximum number of results to return"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minScore"}),": Minimum similarity score threshold"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h4,{id:"connect",children:"connect()"}),"\n",(0,i.jsx)(n.p,{children:"Establishes connection to MongoDB."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"await rag.connect();\n"})}),"\n",(0,i.jsx)(n.h4,{id:"disconnect",children:"disconnect()"}),"\n",(0,i.jsx)(n.p,{children:"Closes the MongoDB connection."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"await rag.disconnect();\n"})}),"\n",(0,i.jsx)(n.h4,{id:"ingestbatch",children:"ingestBatch()"}),"\n",(0,i.jsx)(n.p,{children:"Ingests a batch of documents into the vector store."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"await rag.ingestBatch(documents, {\n  batchSize?: number,\n  preprocessor?: Function\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"documents"})," (array, required): Array of documents to ingest"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"})," (object, optional):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"batchSize"}),": Override default batch size"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"preprocessor"}),": Custom preprocessor for this batch"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Promise<void>"]}),"\n",(0,i.jsx)(n.h4,{id:"search",children:"search()"}),"\n",(0,i.jsx)(n.p,{children:"Performs a vector search for similar documents."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const results = await rag.search(query, {\n  maxResults?: number,\n  minScore?: number,\n  filter?: object\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"query"})," (string, required): Search query"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"})," (object, optional):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"maxResults"}),": Maximum number of results"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minScore"}),": Minimum similarity score"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filter"}),": MongoDB filter for metadata"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Promise<Array<SearchResult>>"]}),"\n",(0,i.jsx)(n.h3,{id:"type-definitions",children:"Type Definitions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface SearchResult {\n  content: string;\n  score: number;\n  metadata?: Record<string, any>;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,i.jsx)(n.h4,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const rag = new MongoRAG({\n  mongoUrl: 'mongodb+srv://your-connection-string',\n  database: 'ragdb',\n  collection: 'documents',\n  embedding: {\n    provider: 'openai',\n    apiKey: process.env.OPENAI_API_KEY\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h4,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const rag = new MongoRAG({\n  mongoUrl: 'mongodb+srv://your-connection-string',\n  database: 'ragdb',\n  collection: 'documents',\n  embedding: {\n    provider: 'openai',\n    apiKey: process.env.OPENAI_API_KEY,\n    model: 'text-embedding-ada-002',\n    batchSize: 100\n  },\n  preprocessing: {\n    documentPreprocessor: (doc) => ({\n      ...doc,\n      content: doc.content.toLowerCase().trim(),\n      metadata: {\n        ...doc.metadata,\n        processedAt: new Date()\n      }\n    }),\n    chunkSize: 500,\n    chunkOverlap: 50\n  },\n  search: {\n    maxResults: 5,\n    minScore: 0.7\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"The library provides specific error types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"try {\n  await rag.search('query');\n} catch (error) {\n  if (error instanceof ConnectionError) {\n    // Handle connection errors\n  } else if (error instanceof EmbeddingError) {\n    // Handle embedding generation errors\n  } else if (error instanceof SearchError) {\n    // Handle search errors\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,i.jsx)(n.p,{children:"MongoRAG emits events you can listen to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"rag.on('connect', () => {\n  console.log('Connected to MongoDB');\n});\n\nrag.on('ingest:start', (batchSize) => {\n  console.log(`Starting ingestion of ${batchSize} documents`);\n});\n\nrag.on('ingest:complete', (count) => {\n  console.log(`Completed ingestion of ${count} documents`);\n});\n\nrag.on('search:start', (query) => {\n  console.log(`Starting search for: ${query}`);\n});\n\nrag.on('error', (error) => {\n  console.error('An error occurred:', error);\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"For more detailed examples and use cases, refer to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/mongodb-rag/docs/examples/basic-example",children:"Basic Example"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/mongodb-rag/docs/examples/advanced-example",children:"Advanced Example"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:function(e,n,r){r.d(n,{R:function(){return c},x:function(){return t}});var s=r(6540);const i={},o=s.createContext(i);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);