"use strict";(self.webpackChunkmongodb_rag_docs=self.webpackChunkmongodb_rag_docs||[]).push([[7922],{8449:function(e){e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/03/15/workshop-introduction","metadata":{"permalink":"/mongodb-rag/blog/2025/03/15/workshop-introduction","editUrl":"https://github.com/mongodb-developer/mongodb-rag/tree/main/mongodb-rag-docs/blog/blog/2025-03-15-workshop-introduction.md","source":"@site/blog/2025-03-15-workshop-introduction.md","title":"Build AI Applications with MongoDB: A Complete RAG Workshop","description":"Since releasing MongoDB-RAG earlier this year, I\'ve received a consistent stream of questions from developers about best practices for building production-ready AI applications. While the library makes RAG implementation much simpler, many developers are looking for end-to-end guidance on the entire development journey.","date":"2025-03-15T00:00:00.000Z","tags":[{"inline":true,"label":"mongodb","permalink":"/mongodb-rag/blog/tags/mongodb"},{"inline":true,"label":"vector-search","permalink":"/mongodb-rag/blog/tags/vector-search"},{"inline":true,"label":"rag","permalink":"/mongodb-rag/blog/tags/rag"},{"inline":true,"label":"ai","permalink":"/mongodb-rag/blog/tags/ai"},{"inline":true,"label":"workshop","permalink":"/mongodb-rag/blog/tags/workshop"},{"inline":true,"label":"tutorial","permalink":"/mongodb-rag/blog/tags/tutorial"}],"readingTime":3.53,"hasTruncateMarker":false,"authors":[{"name":"Michael Lynn","title":"Developer Advocate @ MongoDB","url":"https://github.com/mrlynn","imageURL":"https://avatars.githubusercontent.com/u/192552?v=4","key":null,"page":null}],"frontMatter":{"title":"Build AI Applications with MongoDB: A Complete RAG Workshop","author":"Michael Lynn","author_title":"Developer Advocate @ MongoDB","author_url":"https://github.com/mrlynn","author_image_url":"https://avatars.githubusercontent.com/u/192552?v=4","tags":["mongodb","vector-search","rag","ai","workshop","tutorial"]},"unlisted":false,"nextItem":{"title":"Simplifying RAG with MongoDB","permalink":"/mongodb-rag/blog/2025/02/01/simplifying"}},"content":"Since releasing MongoDB-RAG earlier this year, I\'ve received a consistent stream of questions from developers about best practices for building production-ready AI applications. While the library makes RAG implementation much simpler, many developers are looking for end-to-end guidance on the entire development journey.\\n\\nThat\'s why I\'m excited to announce our new **MongoDB-RAG Workshop** - a comprehensive, hands-on guide to building intelligent applications with MongoDB Atlas Vector Search.\\n\\n## \ud83e\udde0 Why We Created This Workshop\\n\\nBuilding modern AI applications isn\'t just about connecting to an LLM API. It requires:\\n\\n- Understanding vector embeddings and semantic search\\n- Organizing and storing your knowledge base efficiently\\n- Implementing retrieval mechanisms that deliver relevant context\\n- Creating a scalable architecture that performs well in production\\n\\nThis workshop addresses all these challenges, providing a clear path from concept to production.\\n\\n## \ud83d\udcda What You\'ll Learn\\n\\nOur new workshop walks you through the complete process of building a production-ready RAG application:\\n\\n1. **Understanding RAG Fundamentals**  \\n   Before diving into code, we explore how vector search works, why embeddings matter, and the core RAG architecture patterns.\\n\\n2. **Setting Up MongoDB Atlas**  \\n   Learn how to create and configure a MongoDB Atlas cluster with Vector Search capabilities - the foundation of your AI application.\\n\\n3. **Creating Vector Embeddings**  \\n   Master techniques for generating and managing vector embeddings from various text sources, including handling different providers (OpenAI, Ollama, and more).\\n\\n4. **Building a Complete RAG Application**  \\n   Develop a full-featured application that ingests documents, performs semantic search, and generates contextually relevant responses.\\n\\n5. **Advanced Techniques**  \\n   Take your application to the next level with hybrid search, re-ranking, query expansion, and other advanced retrieval strategies.\\n\\n6. **Production Deployment**  \\n   Learn best practices for scaling, monitoring, and optimizing your RAG application in production.\\n\\n## \ud83d\udca1 Who Should Take This Workshop?\\n\\nThis workshop is perfect for:\\n\\n- **Backend Developers** looking to add AI capabilities to existing applications\\n- **AI Engineers** who want to build more robust retrieval systems\\n- **Technical Leaders** evaluating RAG architecture patterns\\n- **Full-Stack Developers** building end-to-end AI applications\\n\\nNo prior experience with vector databases is required, though basic familiarity with MongoDB and Node.js will help you get the most out of the material.\\n\\n## \ud83d\ude80 A Hands-On Approach\\n\\nWhat makes this workshop special is its hands-on nature. You won\'t just read about concepts - you\'ll implement them step-by-step:\\n\\n```javascript\\n// By the end of the workshop, you\'ll be writing code like this\\nasync function advancedRAGPipeline(query) {\\n  // Step 1: Expand query with variations\\n  const expandedQueries = await expandQuery(query);\\n  \\n  // Step 2: Retrieve from multiple collections\\n  const initialResults = await retrieveFromMultipleSources(expandedQueries);\\n  \\n  // Step 3: Rerank results\\n  const rerankedResults = await rerankResults(initialResults, query);\\n  \\n  // Step 4: Generate response with the LLM\\n  const response = await generateResponse(query, rerankedResults);\\n  \\n  return {\\n    answer: response,\\n    sources: rerankedResults.map(r => ({\\n      document: r.documentId,\\n      source: r.metadata?.source,\\n      score: r.score\\n    }))\\n  };\\n}\\n```\\n\\nYou\'ll build real components that solve common challenges:\\n- Document chunking strategies for optimal retrieval\\n- Caching mechanisms for performance optimization\\n- Hybrid search implementations\\n- Microservice architectures for production deployment\\n\\n## \ud83d\udcc8 Real-World Applications\\n\\nThe workshop focuses on practical applications that solve real business problems:\\n\\n- **Customer Support Systems** that retrieve accurate information from knowledge bases\\n- **Research Assistants** that can analyze and retrieve information from scientific literature\\n- **Content Recommendation Engines** powered by semantic similarity\\n- **Intelligent Document Search** across enterprise content\\n\\n## \ud83d\udee0\ufe0f Getting Started\\n\\nThe workshop is available now in our documentation. To begin:\\n\\n1. Make sure you have a [MongoDB Atlas account](https://www.mongodb.com/cloud/atlas/register)\\n2. Install Node.js on your development machine\\n3. Head over to our [Workshop Introduction](/docs/workshop/introduction)\\n\\n## \ud83d\udd2e Looking Ahead\\n\\nThis workshop represents the beginning of our commitment to helping developers build sophisticated AI applications. In the coming months, we\'ll be expanding the content with:\\n\\n- Multi-modal RAG implementations (text + images)\\n- Enterprise-scale architectures\\n- Performance optimization techniques\\n- Integration with popular AI frameworks\\n\\n## \ud83e\udd14 Your Feedback Matters\\n\\nAs you work through the workshop, we\'d love to hear your feedback. What challenges are you facing? What additional topics would you like to see covered? Your input will help shape future content.\\n\\nBuilding AI applications doesn\'t have to be complicated. With MongoDB-RAG and this workshop, you have everything you need to create intelligent, context-aware applications that deliver real value.\\n\\nHappy building!"},{"id":"/2025/02/01/simplifying","metadata":{"permalink":"/mongodb-rag/blog/2025/02/01/simplifying","editUrl":"https://github.com/mongodb-developer/mongodb-rag/tree/main/mongodb-rag-docs/blog/blog/2025-02-01-simplifying.md","source":"@site/blog/2025-02-01-simplifying.md","title":"Simplifying RAG with MongoDB","description":"Over the past year, I\\\\\'ve spent a lot of time talking to developers about Retrieval-Augmented Generation (RAG) and how MongoDB Atlas Vector Search enables efficient vector-based retrieval. While the power of MongoDB as a vector database is undeniable, I noticed a recurring theme: developers wanted a simpler way to implement RAG applications.","date":"2025-02-01T00:00:00.000Z","tags":[{"inline":true,"label":"mongodb","permalink":"/mongodb-rag/blog/tags/mongodb"},{"inline":true,"label":"docusaurus","permalink":"/mongodb-rag/blog/tags/docusaurus"},{"inline":true,"label":"blog","permalink":"/mongodb-rag/blog/tags/blog"}],"readingTime":4.435,"hasTruncateMarker":false,"authors":[{"name":"Michael Lynn","title":"Developer Advocate @ MongoDB","url":"https://github.com/mrlynn","imageURL":"https://avatars.githubusercontent.com/u/192552?v=4","key":null,"page":null}],"frontMatter":{"title":"Simplifying RAG with MongoDB","author":"Michael Lynn","author_title":"Developer Advocate @ MongoDB","author_url":"https://github.com/mrlynn","author_image_url":"https://avatars.githubusercontent.com/u/192552?v=4","tags":["mongodb","docusaurus","blog"]},"unlisted":false,"prevItem":{"title":"Build AI Applications with MongoDB: A Complete RAG Workshop","permalink":"/mongodb-rag/blog/2025/03/15/workshop-introduction"}},"content":"Over the past year, I\\\\\'ve spent a lot of time talking to developers about Retrieval-Augmented Generation (RAG) and how MongoDB Atlas Vector Search enables efficient vector-based retrieval. While the power of MongoDB as a vector database is undeniable, I noticed a recurring theme: developers wanted a simpler way to implement RAG applications.\\n\\nThat\\\\\'s what inspired me to create MongoDB-RAG, an npm library that abstracts away the complexity of embedding generation, vector search, and document retrieval giving developers a plug-and-play way to build RAG-powered applications with MongoDB.\\n\\nToday, I want to introduce the library and share some of the exciting new features we\\\\\'ve recently added to make RAG with MongoDB even more intuitive and performant.\\n\\n\ud83d\udccc Why I Built MongoDB-RAG\\nWhen I first started experimenting with vector search and large language models (LLMs), I found myself repeatedly writing boilerplate code for:\\n\\n- \u2705 Generating embeddings using OpenAI, DeepSeek, or Ollama\\n- \u2705 Storing embeddings in MongoDB efficiently\\n- \u2705 Building vector indexes with optimal settings\\n- \u2705 Running similarity searches using MongoDB Atlas Vector Search\\n- \u2705 Filtering and retrieving documents with hybrid search\\n\\nEvery RAG application required these steps, but the process felt unnecessarily repetitive. What if we could standardize this flow into a reusable library?\\n\\nMongoDB-RAG does just that\u2014eliminating complexity so that you can go from querying unstructured data to getting intelligent results in just a few lines of code.\\n\\n## \ud83d\ude80 What\\\\\'s New in MongoDB-RAG?\\nSince launching the first version, we\\\\\'ve been working hard to refine and expand the library. Here are some of the latest features that make MongoDB-RAG a must-have for building RAG applications with MongoDB Atlas:\\n\\n### \ud83d\udd39 Dynamic Database & Collection Selection\\nDevelopers can now specify custom databases and collections at query time, allowing more flexible data organization. Previously, all data had to be stored in a predefined database, but now you can run searches dynamically across multiple datasets.\\n\\n```javascript\\n\\nconst results = await rag.search(\\"What is AI?\\", {\\n  database: \\"research_db\\",\\n  collection: \\"ai_papers\\",\\n  maxResults: 5\\n});\\n```\\n### \ud83d\udd39 Intelligent Document Chunking\\nOne of the biggest challenges in RAG is breaking large documents into meaningful chunks. MongoDB-RAG now includes three advanced chunking strategies:\\n\\n1. Sliding Window - Maintains context with overlapping chunks\\n2. Semantic Chunking - Uses sentence boundaries to create more meaningful segments\\n3. Recursive Chunking - Dynamically splits large sections into smaller chunks\\n\\n```\\nconst chunkedDocs = chunker.chunkDocument(myDocument, { strategy: \\"semantic\\" });\\n```\\n\\n### \ud83d\udd39 Multi-Embedding Provider Support\\nMongoDB-RAG now supports multiple embedding providers\u2014so you\\\\\'re not locked into one ecosystem.\\n\\nSupported providers include:\\n- \u2705 OpenAI (text-embedding-3-small, text-embedding-3-large)\\n- \u2705 DeepSeek (high-performance embeddings with affordable pricing)\\n- \u2705 Ollama (local LLM-based embeddings for privacy and cost-efficiency)\\n\\n```\\nconst rag = new MongoRAG({\\n  embedding: { provider: \\"ollama\\", baseUrl: \\"http://localhost:11434\\", model: \\"llama3\\" }\\n});\\n```\\n\\n### \ud83d\udd39 Vector Quantization for Faster Queries\\nWe\\\\\'ve integrated automatic vector quantization, reducing memory footprint and boosting search performance in MongoDB Atlas. You can now enable scalar or binary quantization effortlessly.\\n\\n```\\nconst indexDefinition = {\\n  fields: [\\n    { type: \\"vector\\", path: \\"embedding\\", numDimensions: 1536, similarity: \\"cosine\\", quantization: \\"binary\\" }\\n  ]\\n};\\n```\\n\\n### \ud83d\udd39 Hybrid Search: Combining Vector & Metadata Filters\\nOne of the biggest advantages of MongoDB over other vector databases is the ability to perform hybrid searches\u2014combining vector similarity with traditional filters.\\n\\nMongoDB-RAG makes it seamless:\\n\\n```\\nconst results = await rag.search(\\"Latest AI papers\\", {\\n  database: \\"research_db\\",\\n  collection: \\"papers\\",\\n  filter: { \\"metadata.year\\": { $gte: 2022 } }\\n});\\n```\\n\\nNow, you can refine vector searches using structured metadata like dates, authors, or categories.\\n\\n## \u26a1 How to Get Started\\nSetting up MongoDB-RAG is ridiculously easy. Just install the package and connect it to your MongoDB Atlas cluster:\\n\\n1\ufe0f\u20e3 Install MongoDB-RAG\\n\\n```\\nnpm install mongodb-rag dotenv\\n```\\n\\n2\ufe0f\u20e3 Set Up MongoDB Atlas\\nEnsure you have an Atlas cluster with Vector Search enabled, then store your connection string in .env:\\n\\n```\\nMONGODB_URI=mongodb+srv://your-user:your-password@your-cluster.mongodb.net/\\nEMBEDDING_PROVIDER=openai\\nEMBEDDING_API_KEY=your-openai-api-key\\nEMBEDDING_MODEL=text-embedding-3-small\\n```\\n\\n3\ufe0f\u20e3 Ingest Documents\\n\\n```\\nconst documents = [\\n  { id: \\"doc1\\", content: \\"MongoDB is a NoSQL database.\\", metadata: { source: \\"docs\\" } },\\n  { id: \\"doc2\\", content: \\"Vector search is useful for semantic search.\\", metadata: { source: \\"ai\\" } }\\n];\\n\\nawait rag.ingestBatch(documents, { database: \\"my_db\\", collection: \\"docs\\" });\\n```\\n\\n4\ufe0f\u20e3 Perform a Vector Search\\n\\n```\\nconst results = await rag.search(\\"How does vector search work?\\", {\\n  database: \\"my_db\\",\\n  collection: \\"docs\\",\\n  maxResults: 3\\n});\\nconsole.log(\\"Search Results:\\", results);\\n```\\n\\nAnd just like that, your MongoDB-powered RAG application is up and running!\\n\\n## \ud83d\udd2e What\\\\\'s Next?\\n\\nWe\\\\\'re constantly evolving MongoDB-RAG based on developer feedback. Here\\\\\'s what\\\\\'s coming next:\\n\\n- \u2705 RAG Pipelines: End-to-end orchestration for document retrieval & LLM response generation\\n- \u2705 Integration with LangChain: Seamless connection with AI agent frameworks\\n- \u2705 Built-in UI Dashboard: Visualize vector search performance and document embeddings\\n\\n## \ud83c\udfaf Final Thoughts\\n\\nI built MongoDB-RAG because I wanted an easier, more efficient way to work with vector search in MongoDB. Instead of reinventing the wheel every time I built a RAG system, I wanted a reusable, well-optimized library that handles all the heavy lifting.\\n\\nNow, with dynamic database selection, hybrid search, intelligent chunking, and multi-provider embeddings, I truly believe MongoDB-RAG is the fastest way to build production-ready RAG applications.\\n\\nGive it a try, and let me know what you think! \ud83d\ude80\\n\\n- \ud83d\udccc GitHub Repo: github.com/mongodb-developer/mongodb-rag\\n- \ud83d\udccc NPM Package: npmjs.com/package/mongodb-rag\\n\\nLet\\\\\'s simplify RAG development together! \ud83d\udc4f"}]}}')}}]);