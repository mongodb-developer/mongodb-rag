"use strict";(self.webpackChunkmongodb_rag_docs=self.webpackChunkmongodb_rag_docs||[]).push([[1811],{8453:function(n,e,t){t.d(e,{R:function(){return s},x:function(){return o}});var i=t(6540);const r={},a=i.createContext(r);function s(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),i.createElement(a.Provider,{value:e},n.children)}},9440:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return l}});var i=JSON.parse('{"id":"examples/advanced-example","title":"Advanced Example","description":"This example demonstrates advanced features of MongoDB-RAG, including custom preprocessing, metadata filtering, and integration with an LLM for question answering.","source":"@site/docs/examples/advanced-example.md","sourceDirName":"examples","slug":"/examples/advanced-example","permalink":"/mongodb-rag/docs/examples/advanced-example","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/mongodb-rag/tree/main/mongodb-rag-docs/docs/examples/advanced-example.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"advanced-example","title":"Advanced Example","sidebar_position":2},"sidebar":"docs","previous":{"title":"Basic Example","permalink":"/mongodb-rag/docs/examples/basic-example"},"next":{"title":"Using VoyageAI Embeddings","permalink":"/mongodb-rag/docs/examples/voyage-example"}}'),r=t(4848),a=t(8453);const s={id:"advanced-example",title:"Advanced Example",sidebar_position:2},o="Advanced RAG Example",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Advanced Configuration Example",id:"advanced-configuration-example",level:2},{value:"Advanced Features Explained",id:"advanced-features-explained",level:2},{value:"1. Custom Document Preprocessing",id:"1-custom-document-preprocessing",level:3},{value:"2. Metadata Filtering",id:"2-metadata-filtering",level:3},{value:"3. Advanced Search Configuration",id:"3-advanced-search-configuration",level:3},{value:"4. LLM Integration",id:"4-llm-integration",level:3},{value:"5. Error Handling and Monitoring",id:"5-error-handling-and-monitoring",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"advanced-rag-example",children:"Advanced RAG Example"})}),"\n",(0,r.jsx)(e.p,{children:"This example demonstrates advanced features of MongoDB-RAG, including custom preprocessing, metadata filtering, and integration with an LLM for question answering."}),"\n",(0,r.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(e.p,{children:"Install additional dependencies:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"npm install mongodb-rag dotenv openai\n"})}),"\n",(0,r.jsx)(e.h2,{id:"advanced-configuration-example",children:"Advanced Configuration Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { MongoRAG } from 'mongodb-rag';\nimport { OpenAI } from 'openai';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\n\nasync function createAdvancedRAGSystem() {\n  // Custom document preprocessor\n  const documentPreprocessor = (doc) => {\n    return {\n      ...doc,\n      content: doc.content.trim(),\n      metadata: {\n        ...doc.metadata,\n        processedDate: new Date(),\n        wordCount: doc.content.split(' ').length\n      }\n    };\n  };\n\n  // Initialize MongoRAG with advanced configuration\n  const rag = new MongoRAG({\n    mongoUrl: process.env.MONGODB_URI,\n    database: 'ragAdvanced',\n    collection: 'documents',\n    embedding: {\n      provider: 'openai',\n      apiKey: process.env.OPENAI_API_KEY,\n      model: 'text-embedding-3-small',\n      batchSize: 100  // Custom batch size for embeddings\n    },\n    search: {\n      maxResults: 5,      // Return top 5 matches\n      minScore: 0.7       // Minimum similarity score threshold\n    }\n  });\n\n  return rag;\n}\n\n// Advanced QA function using RAG results\nasync function answerQuestion(rag, question, metadata = {}) {\n  // Search with metadata filters\n  const searchResults = await rag.search(question, {\n    filter: metadata,\n    maxResults: 3\n  });\n\n  // Format context from search results\n  const context = searchResults\n    .map(result => result.content)\n    .join('\\n\\n');\n\n  // Generate answer using OpenAI\n  const completion = await openai.chat.completions.create({\n    model: 'gpt-4',\n    messages: [\n      {\n        role: 'system',\n        content: 'You are a helpful assistant. Use the provided context to answer questions accurately.'\n      },\n      {\n        role: 'user',\n        content: `Context: ${context}\\n\\nQuestion: ${question}`\n      }\n    ],\n    temperature: 0.7,\n    max_tokens: 500\n  });\n\n  return {\n    answer: completion.choices[0].message.content,\n    sources: searchResults.map(result => ({\n      content: result.content,\n      score: result.score,\n      metadata: result.metadata\n    }))\n  };\n}\n\n// Example usage\nasync function main() {\n  const rag = await createAdvancedRAGSystem();\n  await rag.connect();\n\n  // Example documents with metadata\n  const documents = [\n    {\n      title: 'Vector Search Setup',\n      content: 'Setting up Vector Search in MongoDB Atlas requires selecting the proper index type...',\n      metadata: {\n        category: 'setup',\n        difficulty: 'intermediate'\n      }\n    },\n    {\n      title: 'Performance Optimization',\n      content: 'To optimize vector search performance, consider index size and dimension reduction...',\n      metadata: {\n        category: 'optimization',\n        difficulty: 'advanced'\n      }\n    }\n  ];\n\n  // Ingest documents\n  await rag.ingestBatch(documents);\n\n  // Answer a question with metadata filtering\n  const response = await answerQuestion(\n    rag,\n    'How do I optimize vector search performance?',\n    { difficulty: 'advanced' }\n  );\n\n  console.log('Answer:', response.answer);\n  console.log('Sources:', response.sources);\n}\n\nmain().catch(console.error);\n"})}),"\n",(0,r.jsx)(e.h2,{id:"advanced-features-explained",children:"Advanced Features Explained"}),"\n",(0,r.jsx)(e.h3,{id:"1-custom-document-preprocessing",children:"1. Custom Document Preprocessing"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Document enhancement with metadata"}),"\n",(0,r.jsx)(e.li,{children:"Custom chunking strategy"}),"\n",(0,r.jsx)(e.li,{children:"Batch processing optimization"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"2-metadata-filtering",children:"2. Metadata Filtering"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Filter search results by metadata fields"}),"\n",(0,r.jsx)(e.li,{children:"Combine semantic search with metadata constraints"}),"\n",(0,r.jsx)(e.li,{children:"Flexible query conditions"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"3-advanced-search-configuration",children:"3. Advanced Search Configuration"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Customizable similarity thresholds"}),"\n",(0,r.jsx)(e.li,{children:"Result count control"}),"\n",(0,r.jsx)(e.li,{children:"Score-based filtering"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"4-llm-integration",children:"4. LLM Integration"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Context formatting"}),"\n",(0,r.jsx)(e.li,{children:"Prompt engineering"}),"\n",(0,r.jsx)(e.li,{children:"Source attribution"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"5-error-handling-and-monitoring",children:"5. Error Handling and Monitoring"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// Error handling example\nasync function robustSearch(rag, question, retries = 3) {\n  for (let i = 0; i < retries; i++) {\n    try {\n      return await rag.search(question);\n    } catch (error) {\n      console.error(`Attempt ${i + 1} failed:`, error);\n      if (i === retries - 1) throw error;\n      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));\n    }\n  }\n}\n\n// Monitoring example\nconst searchWithMetrics = async (rag, question) => {\n  const startTime = Date.now();\n  const results = await rag.search(question);\n  const duration = Date.now() - startTime;\n\n  console.log(`Search metrics:\n    - Duration: ${duration}ms\n    - Results found: ${results.length}\n    - Average score: ${results.reduce((acc, r) => acc + r.score, 0) / results.length}\n  `);\n\n  return results;\n};\n"})}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Document Processing"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Implement robust text cleaning"}),"\n",(0,r.jsx)(e.li,{children:"Consider domain-specific preprocessing"}),"\n",(0,r.jsx)(e.li,{children:"Optimize chunk sizes for your use case"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Search Optimization"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Balance precision vs. recall"}),"\n",(0,r.jsx)(e.li,{children:"Use appropriate similarity thresholds"}),"\n",(0,r.jsx)(e.li,{children:"Implement caching for frequent queries"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Performance"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Monitor memory usage"}),"\n",(0,r.jsx)(e.li,{children:"Implement connection pooling"}),"\n",(0,r.jsx)(e.li,{children:"Use appropriate batch sizes"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Security"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Implement proper API key management"}),"\n",(0,r.jsx)(e.li,{children:"Validate and sanitize input"}),"\n",(0,r.jsx)(e.li,{children:"Monitor usage and implement rate limiting"}),"\n"]}),"\n"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}}}]);